// wap to convert a given infix expression to postfix expression and evaluate it.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100

typedef struct stack
{
    int top;
    char data[MAX];
} stack;

void push(stack *s, char c)
{
    if (s->top == MAX - 1)
    {
        printf("Stack Overflow !!");
        return;
    }
    s->top++;
    s->data[s->top] = c;
}

char pop(stack *s)
{
    if (s->top == -1)
    {
        printf("Stack Underflow !!");
        return -1;
    }
    char c = s->data[s->top];
    s->top--;
    return c;
}

int isOperand(char c)
{
    if (c >= '0' && c <= '9')
        return 1;
    else
        return 0;
}

int isOperator(char c)
{
    if (c == '+' || c == '-' || c == '*' || c == '/')
        return 1;
    else
        return 0;
}

int precedence(char c)
{
    if (c == '+' || c == '-')
        return 1;
    else if (c == '*' || c == '/')
        return 2;
    else
        return 0;
}

int evaluate(int a, int b, char c)
{
    if (c == '+')
        return a + b;
    else if (c == '-')
        return a - b;
    else if (c == '*')
        return a * b;
    else if (c == '/')
        return a / b;
    else
        return 0;
}

int main()
{
    char infix[MAX], postfix[MAX];
    stack s;
    s.top = -1;
    int i = 0, j = 0;
    printf("Enter the infix expression: ");
    scanf("%s", infix);
    while (infix[i] != '\0')
    {
        if (isOperand(infix[i]))
        {
            postfix[j] = infix[i];
            j++;
        }
        else if (infix[i] == '(')
        {
            push(&s, infix[i]);
        }
        else if (infix[i] == ')')
        {
            while (s.data[s.top] != '(')
            {
                postfix[j] = pop(&s);
                j++;
            }
            pop(&s);
        }
        else if (isOperator(infix[i]))
        {
            if (precedence(infix[i]) > precedence(s.data[s.top]))
            {
                push(&s, infix[i]);
            }
            else
            {
                while (precedence(infix[i]) <= precedence(s.data[s.top]))
                {
                    postfix[j] = pop(&s);
                    j++;
                }
                push(&s, infix[i]);
            }
        }
        i++;
    }
    while (s.top != -1)
    {
        postfix[j] = pop(&s);
        j++;
    }
    postfix[j] = '\0';
    printf("Postfix expression: %s ", postfix);
    stack s1;
    s1.top = -1;
    i = 0;
    while (postfix[i] != '\0')
    {
        if (isOperand(postfix[i]))
        {
            push(&s1, postfix[i] - '0');
        }
        else if (isOperator(postfix[i]))
        {
            int a = pop(&s1);
            int b = pop(&s1);
            int c = evaluate(b, a, postfix[i]);
            push(&s1, c);
        }
        i++;
    }
    printf(" Result: %d", pop(&s1));
    return 0;
}





OUTPUT
Enter the infix expression: 3+2*5
Postfix expression: 325*+  Result: 13
